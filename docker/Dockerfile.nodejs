# =============================================================================
# ULTRA-OPTIMIZED Unified Node.js Dockerfile for OnSocial JS Packages
# =============================================================================
# Advanced optimization techniques:
# - BuildKit cache mounts for pnpm store
# - Multi-platform builds ready
# - Maximum layer caching
# - Distroless runtime for security
# - Optimal build parallelization
# =============================================================================

# syntax=docker/dockerfile:1.4
FROM node:20-alpine AS base

# Set HOME and XDG_CACHE_HOME to ensure Corepack and pnpm can write cache
ENV HOME=/root
ENV XDG_CACHE_HOME=$HOME/.cache

# Install system dependencies and pnpm in one layer
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && corepack enable \
    && corepack prepare pnpm@latest --activate

WORKDIR /app

# -----------------------------------------------------------------------------
# Stage 1: Dependency Installation with Cache Mount
# -----------------------------------------------------------------------------
FROM base AS deps

# Copy package manager configuration
COPY pnpm-workspace.yaml pnpm-lock.yaml package.json tsconfig.json ./

# Create package directories first
RUN mkdir -p packages/onsocial-js packages/onsocial-auth packages/onsocial-backend packages/onsocial-app

# Copy package.json files with optimal layer caching
COPY packages/onsocial-js/package.json ./packages/onsocial-js/
COPY packages/onsocial-auth/package.json ./packages/onsocial-auth/
COPY packages/onsocial-backend/package.json ./packages/onsocial-backend/
COPY packages/onsocial-app/package.json ./packages/onsocial-app/

# Copy scripts directory (needed for postinstall hook)
COPY scripts ./scripts

# Install dependencies with BuildKit cache mount
# Use a shared cache directory with proper permissions
RUN --mount=type=cache,target=/app/.pnpm-store,uid=1000,gid=1000 \
    mkdir -p /app/.pnpm-store && \
    pnpm config set store-dir /app/.pnpm-store && \
    pnpm install --frozen-lockfile --prefer-offline

# -----------------------------------------------------------------------------
# Stage 2: Build Stage
# -----------------------------------------------------------------------------
FROM deps AS builder

# Remove selective build logic; always copy all sources, do not build in Dockerfile
# Copy TypeScript configs that might affect compilation
COPY tsconfig.json ./

# Copy source code
COPY packages/onsocial-js ./packages/onsocial-js
COPY packages/onsocial-auth ./packages/onsocial-auth  
COPY packages/onsocial-backend ./packages/onsocial-backend
COPY packages/onsocial-app ./packages/onsocial-app

# -----------------------------------------------------------------------------
# Stage 3: Production Runtime
# -----------------------------------------------------------------------------
FROM node:20-alpine AS runtime-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    jq \
    dumb-init \
    && corepack enable

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001 -G nodejs

# Set HOME and XDG_CACHE_HOME for appuser
ENV HOME=/home/appuser
ENV XDG_CACHE_HOME=$HOME/.cache

# Ensure cache directory exists and is owned by appuser
RUN mkdir -p $XDG_CACHE_HOME/node/corepack/v1/pnpm && chown -R appuser:nodejs $HOME

WORKDIR /app

# Copy production artifacts from the prod-artifacts stage
COPY --from=prod-artifacts --chown=appuser:nodejs /app/pnpm-workspace.yaml ./
COPY --from=prod-artifacts --chown=appuser:nodejs /app/package.json ./
COPY --from=prod-artifacts --chown=appuser:nodejs /app/node_modules ./node_modules
COPY --from=prod-artifacts --chown=appuser:nodejs /app/packages ./packages

# Switch to non-root user
USER appuser

# Set pnpm store directory for appuser
RUN pnpm config set store-dir $XDG_CACHE_HOME/pnpm-store

# Health check for orchestration
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD pnpm --version || exit 1

# Use dumb-init to handle signals properly in containers
ENTRYPOINT ["dumb-init", "--"]

# Default command (override per service)
CMD ["pnpm", "start"]
